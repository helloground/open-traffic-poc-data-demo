import:
    - https://tangrams.github.io/zinc-style/zinc-style.yaml
    - https://tangrams.github.io/blocks/functions/zoom.yaml
    - https://tangrams.github.io/blocks/functions/aastep.yaml

sources:
    opentraffic:
        type: GeoJSON
        url: data/opentraffic.json

textures:
    opentraffic_lut:
        url: data/opentraffic.png
        filtering: nearest

layers:
    opentraffic:
        data: { source: opentraffic }
        draw:
            opentraffic:
                order: 10001
                width: [[10,2px],[15,5px],[20,5m]]
                color: |
                    function () {
                        return [ ( Math.floor(feature.id/255))/255, (feature.id%255)/255, 0 ]; 
                    }
styles:
    opentraffic:
        base: lines
        mix: [functions-zoom, functions-aastep]
        texcoords: true
        animated: true
        lighting: false
        blend: inlay
        shaders:
            defines:
                ZOOM_START: 15.
                ZOOM_END: 20.
                ZOOM_IN: .0
                ZOOM_OUT: .5
                COL_WIDTH: 24.
            uniforms:
                u_data: opentraffic_lut
                u_param: [24,6123]
                u_offset: 0
            blocks: 
                global: |
                    float getID (vec2 encodedID) {
                        return (encodedID.x*65025.+encodedID.y*255.)+.5;
                    }

                    vec2 getUV (float id, float x_offset) {
                        float y = mod(id,u_param.y);
                        float x = floor(id/u_param.y)*COL_WIDTH;
                        return vec2(x+x_offset, y);
                    }
                    
                    vec4 getColor (vec2 st) {
                        float texWidth = u_param.x;
                        float texHeigth = u_param.y;
                        st.x = st.x/texWidth;
                        st.y = 1.-st.y/texHeigth;
                        return texture2D(u_data,st);
                    }
                width: |
                    width *= v_texcoord.x ;
                color: |
                    float id = getID(color.st);

                    float now = u_offset;
                    float i_now = floor(now);
                    float f_now = fract(now);

                    float speed_prev = getColor(getUV(id,i_now-1.)).r;
                    float speed_now = getColor(getUV(id,i_now)).r;
                    float speed_next = getColor(getUV(id,i_now+1.)).r;
                    
                    float speed_prev_interpolated = mix(speed_prev, speed_now, f_now);
                    float speed_now_interpolated = mix(speed_now, speed_next, f_now);
                    //float speed_delta = speed_now_interpolated - speed_prev_interpolated;
                    float speed_delta = speed_now_interpolated - speed_prev;

                    //color.rgb = mix(vec3(1.000,0.068,0.378),vec3(0.000,1.000,0.818),smoothstep(0.,.3,speed_now_interpolated));
                    color.rgb = mix(vec3(1.000,0.068,0.378),vec3(0.000,1.000,0.818),.5+speed_delta*.5);
                    //color.rgb = mix(vec3(1.000,0.0,0.),vec3(0.000,1.000,0.0),.5+speed_delta*.5);
                    color.rgb = mix(vec3(.5),color.rgb,pow(speed_delta,.2)*2.*(1.-f_now));

                    vec2 st = v_texcoord.xy+vec2(.5,0.);
                    st.y -= u_time*10.*speed_now;
                    //st.y -= u_time*u_meters_per_pixel*((speed_now)*100.);
                    
                    color.a *= aastep(zoom(),fract(st.y+abs(st.x*.5-.5)));